#SPDX-License-Identifier: MIT-0
---
- name: install database package(s)
  ansible.builtin.apt:
    name: "postgresql-{{ postgresql_version }}"

- name: modify postgresql configuration
  ansible.builtin.copy:
    src: etc/postgresql/postgresql.conf
    dest: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    mode: "0644"
  register: pg_config

- name: modify postgresql host-based authentication
  ansible.builtin.copy:
    src: etc/postgresql/pg_hba.conf
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    mode: "0644"
  register: pg_hba_config

- name: restart database (only if configuration(s) were changed)
  ansible.builtin.systemd_service:
    name: postgresql
    state: restarted
  when: pg_config.changed or pg_hba_config.changed

- name: create database user(s) on node
  ansible.builtin.user:
    name: dba
    group: sudo
    shell: /bin/bash

- name: install supporting automation package(s)
  ansible.builtin.pip:
    name: psycopg2-binary
    virtualenv: "{{ postgresql_python_virtual_environment }}"
    virtualenv_command: "{{ ansible_python_interpreter }} -m venv"

- block:

  - name: create database user(s)
    become_user: postgres
    become: yes
    community.postgresql.postgresql_user:
      name: dba
      password: "{{ postgresql_dba_password | mandatory }}"
      role_attr_flags: SUPERUSER,CREATEROLE,CREATEDB,REPLICATION,BYPASSRLS

  - name: reconfigure existing database superuser(s)
    become_user: dba
    become: yes
    community.postgresql.postgresql_user:
      login_user: dba
      login_password: "{{ postgresql_dba_password | mandatory }}"
      login_db: postgres
      name: postgres
      role_attr_flags: NOCREATEROLE,NOCREATEDB,NOREPLICATION,NOBYPASSRLS

  vars:
    ansible_python_interpreter: "{{ postgresql_python_virtual_environment }}/bin/python"
